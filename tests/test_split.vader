Given php (not a function line);
$foo = 'bar';

Execute:
  AssertEqual PhpArgumentsSplit(), 'Not a function'

Expect (nothing happens);
$foo = 'bar';


Given php (an already split function);
function whatever (
    $foo,
    $bar = 1
) {
    // body 1
    // body 2
}

Execute:
  call PhpArgumentsSplit()

Expect (nothing happens);
function whatever (
    $foo,
    $bar = 1
) {
    // body 1
    // body 2
}

Given php (function with 0 indentation level);
function whatever ($foo, $bar = 1)
{
    // body 1
    // body 2
}

Execute:
  call PhpArgumentsSplit()

Expect (indentation level is preserved);
function whatever (
    $foo,
    $bar = 1
) {
    // body 1
    // body 2
}


Given php (function with 1 indentation level);
    function whatever ($foo, $bar = 1)
    {
        // body 1
        // body 2
    }

Execute:
  call PhpArgumentsSplit()

Expect (indentation level is preserved);
    function whatever (
        $foo,
        $bar = 1
    ) {
        // body 1
        // body 2
    }


Given php (function with 2 indentation levels);
        function whatever ($foo, $bar = 1)
        {
            // body 1
            // body 2
        }

Execute:
  call PhpArgumentsSplit()

Expect (indentation level is preserved);
        function whatever (
            $foo,
            $bar = 1
        ) {
            // body 1
            // body 2
        }


Given php (method in a class);
class Something
{
    public function something($foo, $bar = 1)
    {

    }
}

Execute:
  execute '/public function something'
  call PhpArgumentsSplit()

Expect (correctly expanded);
class Something
{
    public function something (
        $foo,
        $bar = 1
    ) {

    }
}


Given php (function with extra commas before parameter);
function whatever ($foo,$bar = 1 ,$a = false   ,$b)
{
    // body 1
    // body 2
}

Execute:
  call PhpArgumentsSplit()

Expect (commas are fixed);
function whatever (
    $foo,
    $bar = 1,
    $a = false,
    $b
) {
    // body 1
    // body 2
}


Given php (function with extra commas after parameter);
function whatever ($foo,$bar = 1, $a = false,   $b)
{
    // body 1
    // body 2
}

Execute:
  call PhpArgumentsSplit()

Expect (commas are fixed);
function whatever (
    $foo,
    $bar = 1,
    $a = false,
    $b
) {
    // body 1
    // body 2
}


Given php (function with extra commas before and after parameter);
function whatever ($foo,$bar = 1 , $a = false   ,    $b)
{
    // body 1
    // body 2
}

Execute:
  call PhpArgumentsSplit()

Expect (commas are fixed);
function whatever (
    $foo,
    $bar = 1,
    $a = false,
    $b
) {
    // body 1
    // body 2
}


Given php (function with extra spaces after opening parenthesis);
function whatever (   $foo, $bar) {
    // body 1
    // body 2
}

Execute:
  call PhpArgumentsSplit()

Expect (extra spaces are removed);
function whatever (
    $foo,
    $bar
) {
    // body 1
    // body 2
}


Given php (function with extra spaces before closing parenthesis);
function whatever ($foo, $bar   ) {
    // body 1
    // body 2
}

Execute:
  call PhpArgumentsSplit()

Expect (extra spaces are removed);
function whatever (
    $foo,
    $bar
) {
    // body 1
    // body 2
}


Given php (function with return type);
function whatever ($foo, $bar): bool
{
    // body 1
    // body 2
}

Execute:
  call PhpArgumentsSplit()

Expect (return type is preserved);
function whatever (
    $foo,
    $bar
): bool {
    // body 1
    // body 2
}


Given php (function with open bracket in same line);
function whatever ($foo, $bar) {
    // body 1
    // body 2
}

Execute:
  call PhpArgumentsSplit()

Expect (open bracket is moved next to closing parenthesis);
function whatever (
    $foo,
    $bar
) {
    // body 1
    // body 2
}


Given php (function with open bracket in same line and extra spaces in between);
function whatever ($foo, $bar)    {
    // body 1
    // body 2
}

Execute:
  call PhpArgumentsSplit()

Expect (extra spaces are removed);
function whatever (
    $foo,
    $bar
) {
    // body 1
    // body 2
}


Given php (function with open bracket in same line and return type);
function whatever ($foo, $bar): bool {
    // body 1
    // body 2
}

Execute:
  call PhpArgumentsSplit()

Expect (open bracket is moved next to closing parenthesis and return type is preserved);
function whatever (
    $foo,
    $bar
): bool {
    // body 1
    // body 2
}


Given php (function with open bracket in same line with extra spaces and return type);
function whatever ($foo, $bar): bool       {
    // body 1
    // body 2
}

Execute:
  call PhpArgumentsSplit()

Expect (extra spaces are removed);
function whatever (
    $foo,
    $bar
): bool {
    // body 1
    // body 2
}


Given php (function with open bracket in same line with extra spaces after and before return type);
function whatever ($foo, $bar):      bool       {
    // body 1
    // body 2
}

Execute:
  call PhpArgumentsSplit()

Expect (extra spaces are removed);
function whatever (
    $foo,
    $bar
): bool {
    // body 1
    // body 2
}


Given php (function without space between function and open parenthesis);
function whatever($longArgument) {
   // body
};


Execute:
  call PhpArgumentsSplit()

Expect (space is added);
function whatever (
    $longArgument
) {
   // body
};


Given php (function with 0 arguments);
function whatever () {
    // body
}

Execute:
  call PhpArgumentsSplit()

Expect (is left as is);
function whatever () {
    // body
}


Given php (closure with 0 arguments);
$longArgs_noVars = function (): void {
   // body
};

Execute:
  call PhpArgumentsSplit()

Expect (is left as is);
$longArgs_noVars = function (): void {
   // body
};


Given php (php class with method with 0 arguments);
class SomeClass
{
    protected function someMethod()
    {
        // body
    }
}

Execute:
  call PhpArgumentsSplit()

Expect (is left as is);
class SomeClass
{
    protected function someMethod()
    {
        // body
    }
}


Given php (closure with 4 arguments);
$longArgs_noVars = function ($longArgument, $longerArgument, $muchLongerArgument): void {
   // body
};

Execute:
  call PhpArgumentsSplit()

Expect (is split);
$longArgs_noVars = function (
    $longArgument,
    $longerArgument,
    $muchLongerArgument
): void {
   // body
};


Given php (closure with no args but 3 use arguments);
$noArgs_longVars = function () use ($longVar1, $longerVar2, $muchLongerVar3) {
   // body
};

Execute:
  call PhpArgumentsSplit()

Expect (function is left as is and use is split);
$noArgs_longVars = function () use (
    $longVar1,
    $longerVar2,
    $muchLongerVar3
) {
   // body
};


Given php (closure with 2 arguments and 4 use arguments);
$noArgs_longVars = function ($foo, $bar) use ($longVar1, $longerVar2, $muchLongerVar3) {
   // body
};

Execute:
  call PhpArgumentsSplit()

Expect (both are split);
$noArgs_longVars = function (
    $foo,
    $bar
) use (
    $longVar1,
    $longerVar2,
    $muchLongerVar3
) {
   // body
};
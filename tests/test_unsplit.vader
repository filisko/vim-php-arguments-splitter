Given php (not a function line);
$foo = 'bar';

Execute:
  AssertEqual PhpArgumentsUnsplit(), 'Not a function'

Expect (nothing happens);
$foo = 'bar';


Given php (function already unsplit);
function whatever(string $foo, ?int $bar = 1) {
    // body
}

Execute:
  call PhpArgumentsUnsplit()

Expect (nothing happens);
function whatever(string $foo, ?int $bar = 1) {
    // body
}


Given php (function with 0 indentation level);
function whatever(
    string $foo,
    ?int $bar = 1
) {
    // body
}

Execute:
  call PhpArgumentsUnsplit()

Expect (opening bracket is moved to same line);
function whatever(string $foo, ?int $bar = 1) {
    // body
}


Given php (function with 1 indentation level);
    function whatever(
        string $foo,
        ?int $bar = 1
    ) {
        // body
    }

Execute:
  call PhpArgumentsUnsplit()

Expect (indentation level is preserved and opening bracket is moved to same line);
    function whatever(string $foo, ?int $bar = 1) {
        // body
    }


Given php (function with 2 indentation levels);
        function whatever(
            string $foo,
            ?int $bar = 1
        ) {
            // body
        }

Execute:
  call PhpArgumentsUnsplit()

Expect (indentation level is preserved and opening bracket is moved to same line);
        function whatever(string $foo, ?int $bar = 1) {
            // body
        }


Given php (function with extra spaces before comma);
function whatever(
    string $foo,
    ?int $bar = 1 ,
    array $a = []   ,
    ?bool $b = 1
) {
    // body
}

Execute:
  call PhpArgumentsUnsplit()

Expect (extra spaces are removed);
function whatever(string $foo, ?int $bar = 1, array $a = [], ?bool $b = 1) {
    // body
}


Given php (function with extra spaces after comma);
function whatever(
    string $foo,
    ?int $bar = 1, 
    array $a = [],  
    ?bool $b = 1    
) {
    // body
}

Execute:
  call PhpArgumentsUnsplit()

Expect (extra spaces are removed);
function whatever(string $foo, ?int $bar = 1, array $a = [], ?bool $b = 1) {
    // body
}


Given php (function with return type);
function whatever(
    string $foo,
    ?int $bar = 1,
    array $a = [],
    ?bool $b = 1
): ?bool {
    // body
}

Execute:
  call PhpArgumentsUnsplit()

Expect (return type is preserved);
function whatever(string $foo, ?int $bar = 1, array $a = [], ?bool $b = 1): ?bool {
    // body
}


Given php (function with extra spaces before opening bracket);
function whatever(
    string $foo,
    ?int $bar = 1,
    array $a = [],
    ?bool $b = 1
): ?bool     {
    // body
}

Execute:
  call PhpArgumentsUnsplit()

Expect (extra spaces are removed);
function whatever(string $foo, ?int $bar = 1, array $a = [], ?bool $b = 1): ?bool {
    // body
}


Given php (function with extra spaces before return type);
function whatever(
    string $foo,
    ?int $bar = 1,
    array $a = [],
    ?bool $b = 1
):    ?bool     {
    // body
}

Execute:
  call PhpArgumentsUnsplit()

Expect (extra spaces are removed);
function whatever(string $foo, ?int $bar = 1, array $a = [], ?bool $b = 1): ?bool {
    // body
}


Given php (function with extra spaces between closing parenthesis and opening bracket without return type);
function whatever(
    string $foo,
    ?int $bar = 1,
    array $a = [],
    ?bool $b = 1
)   {
    // body
}

Execute:
  call PhpArgumentsUnsplit()

Expect (only one space is left);
function whatever(string $foo, ?int $bar = 1, array $a = [], ?bool $b = 1) {
    // body
}


Given php (multiple methods within a class);
class Something
{
    public function something(
        $foo,
        $bar = 1
    ) {
        // body line 1
        // body line 2
    }

    protected function something(
        $foo,
        $bar = 1
    ) {
        // body line 1
        // body line 2
    }

    private function something(
        $foo,
        $bar = 1
    ) {
        // body line 1
        // body line 2
    }

    public static function something(
        $foo,
        $bar = 1
    ) {
        // body line 1
        // body line 2
    }

    protected static function something(
        $foo,
        $bar = 1
    ) {
        // body line 1
        // body line 2
    }

    private static function something(
        $foo,
        $bar = 1
    ) {
        // body line 1
        // body line 2
    }

    static public function something(
        $foo,
        $bar = 1
    ) {
        // body line 1
        // body line 2
    }

    static protected function something(
        $foo,
        $bar = 1
    ) {
        // body line 1
        // body line 2
    }

    static private function something(
        $foo,
        $bar = 1
    ) {
        // body line 1
        // body line 2
    }
}

Execute:
  execute '/public function something'
  call PhpArgumentsUnsplit()

  execute '/protected function something'
  call PhpArgumentsUnsplit()

  execute '/private function something'
  call PhpArgumentsUnsplit()

  execute '/public static function something'
  call PhpArgumentsUnsplit()

  execute '/protected static function something'
  call PhpArgumentsUnsplit()

  execute '/private static function something'
  call PhpArgumentsUnsplit()

  execute '/static public function something'
  call PhpArgumentsUnsplit()

  execute '/static protected function something'
  call PhpArgumentsUnsplit()

  execute '/static private function something'
  call PhpArgumentsUnsplit()


Expect (open bracket is set in new line);
class Something
{
    public function something($foo, $bar = 1)
    {
        // body line 1
        // body line 2
    }

    protected function something($foo, $bar = 1)
    {
        // body line 1
        // body line 2
    }

    private function something($foo, $bar = 1)
    {
        // body line 1
        // body line 2
    }

    public static function something($foo, $bar = 1)
    {
        // body line 1
        // body line 2
    }

    protected static function something($foo, $bar = 1)
    {
        // body line 1
        // body line 2
    }

    private static function something($foo, $bar = 1)
    {
        // body line 1
        // body line 2
    }

    static public function something($foo, $bar = 1)
    {
        // body line 1
        // body line 2
    }

    static protected function something($foo, $bar = 1)
    {
        // body line 1
        // body line 2
    }

    static private function something($foo, $bar = 1)
    {
        // body line 1
        // body line 2
    }
}


Given php (function with newlines between params);
function whatever(

    string $foo,


    ?int $bar = 1



) {
    // body
}

Execute:
  call PhpArgumentsUnsplit()

Expect (newlines are removed);
function whatever(string $foo, ?int $bar = 1) {
    // body
}


Given php (function with 0 arguments);
function whatever(

) {
    // body
}

Execute:
  call PhpArgumentsUnsplit()

Expect (is unsplitted);
function whatever() {
    // body
}


Given php (closure with 0 arguments);
$longArgs_noVars = function (
    
): void {
   // body
};

Execute:
  call PhpArgumentsUnsplit()

Expect (is unsplit);
$longArgs_noVars = function (): void {
   // body
};


Given php (class method with 0 arguments);
class SomeClass
{
    protected function someMethod(

    ) {
        // body
    }
}

Execute:
  execute '/protected function someMethod'
  call PhpArgumentsUnsplit()

Expect (is unsplit);
class SomeClass
{
    protected function someMethod()
    {
        // body
    }
}


Given php (closure with 4 arguments);
$longArgs_noVars = function (
    $longArgument,
    $longerArgument,
    $muchLongerArgument
): void {
   // body
};


Execute:
  call PhpArgumentsUnsplit()

Expect (is unsplit);
$longArgs_noVars = function ($longArgument, $longerArgument, $muchLongerArgument): void {
   // body
};



Given php (closure with no args but 3 use arguments);
$noArgs_longVars = function () use (
    $longVar1,
    $longerVar2,
    $muchLongerVar3
) {
   // body
};

Execute:
  call PhpArgumentsUnsplit()

Expect (function is left as is and use is unsplit);
$noArgs_longVars = function () use ($longVar1, $longerVar2, $muchLongerVar3) {
   // body
};


Given php (closure with 2 arguments and 4 use arguments);
$noArgs_longVars = function (
    $foo,
    $bar
) use (
    $longVar1,
    $longerVar2,
    $muchLongerVar3
) {
   // body
};

Execute:
  call PhpArgumentsUnsplit()

Expect (both are unsplit);
$noArgs_longVars = function ($foo, $bar) use ($longVar1, $longerVar2, $muchLongerVar3) {
   // body
};